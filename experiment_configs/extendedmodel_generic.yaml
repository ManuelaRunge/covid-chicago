experiment_setup_parameters:
  'number_of_samples': 10
  'number_of_runs': 1
  'duration': 400
  'monitoring_samples': 400 # needs to be smaller than duration
  'random_seed': 751
  'initialAs': 10
fixed_parameters_region_specific:
  populations:
    'Chicago': 2716921
  startdate:
    'Chicago': 2020-02-13  # used for spatial model 
fixed_parameters_global:
sampled_parameters:
  'time_to_infectious':
    np.random: uniform
    function_kwargs: {'low': 3.4, 'high':4.5}
  'time_to_symptoms':
    np.random: uniform
    function_kwargs: {'low': 2.4, 'high': 3.5}
  'time_to_hospitalization':
    np.random: uniform
    function_kwargs: {'low':3, 'high':6}
  'time_to_critical':
    np.random: uniform
    function_kwargs: {'low':4, 'high':6}
  'time_to_death':
    np.random: uniform
    function_kwargs: {'low':4, 'high':6}
  ### DELAY BETWEEN ONSET OF SYMPTOMS AND BEING TESTED 
  ### Parameter values are substracted from the time values above and need to be >=1
  'time_to_detection':
    np.random: uniform
    function_kwargs: {'low':2.0, 'high':2.0}
  ### Optionally use separate time to detection (use matching emodl))
  'time_to_detection_As':
    np.random: uniform
    function_kwargs: {'low':1.0, 'high':6.0}
  'time_to_detection_Sym':
    np.random: uniform
    function_kwargs: {'low':7.0, 'high':7.0}
    #function_kwargs: {'low':2.0, 'high':5.0}
  'time_to_detection_Sys':
    np.random: uniform
    function_kwargs: {'low':2.0, 'high':2.0}
  ### RECOVERY TIMES 
  'recovery_time_asymp':
    np.random: uniform
    function_kwargs: {'low':7, 'high':10}
  'recovery_time_mild':
    np.random: uniform
    function_kwargs: {'low':9, 'high':9}
    #function_kwargs: {'low':7, 'high':10}
  'recovery_time_hosp':
    np.random: uniform
    function_kwargs: {'low':4, 'high':6}
  'recovery_time_crit':
    np.random: uniform
    function_kwargs: {'low':8, 'high':10}
  'fraction_symptomatic':
    np.random: uniform
    function_kwargs: {'low':0.5, 'high':0.7}
  'fraction_severe':
    np.random: uniform
    function_kwargs: {'low':0.06, 'high':0.1}
  'fraction_critical':
    np.random: uniform
    function_kwargs: {'low':0.20, 'high':0.35}
  'cfr': 
    np.random: uniform
    function_kwargs: {'low':0.01, 'high':0.03}
  'reduced_inf_of_det_cases':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0.3}
  'd_As':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0}
  'd_P':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0}  
  'd_Sys':
    np.random: uniform
    function_kwargs: {'low':0.800, 'high':1.000}
  'd_Sym':
    np.random: uniform
    function_kwargs: {'low':0.097, 'high':0.258}
  ### fraction_critical
  'fraction_critical':
    np.random: uniform
    function_kwargs: {'low':0.05, 'high':0.09}
intervention_parameters:
  ### TIME-VARYING PARAMETER - EFFECT SIZE
  ### Reset Ki to defined proporions of it's initial value  
  ### (only used if corresponding emodl is defined)    
  'backtonormal_multiplier':
    np.random: uniform
    function_kwargs: {'low':0.10, 'high':0.10}
  ### INCREASE DETECTION RATES of asymptomatic, presymptomatic and mild infections
  'trigger':
    np.random: uniform
    function_kwargs: {'low':420, 'high':420}
  ### Since d_Sym differs per group, this parameter defines relative increase rather than fraction detected!
  'rollback':
    np: linspace
    function_kwargs: {'start':0.05, 'stop':0.8, 'num' : 3}
  'capacity_multiplier':
    np: linspace
    function_kwargs: {'start':0.05, 'stop':0.8, 'num' : 3}
  'trigger_delay_days':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0}   
time_parameters:
  ### TIME-VARYING PARAMETER  - DATES
  ### Reduce Ki due to stay-at-home policy 
  'ki_multiplier_time_3a':
    custom_function: DateToTimestep
    # To use multiple dates instead of just one date, use an array of dates,
    # e.g., function_kwargs: {'dates': [2020-03-12, 2020-03-13]}
    function_kwargs: {'dates': 2020-03-12}
  'ki_multiplier_time_3b':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-17}
  'ki_multiplier_time_3c':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-21}
  'ki_multiplier_time_4':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-21}
  'ki_multiplier_time_6':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-21}
  'ki_multiplier_time_7':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-25}
  'ki_multiplier_time_8':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-08-25}
    #function_kwargs: {'dates': [2020-07-16, 2020-07-30, 2020-08-01, 2020-08-15, 2020-08-30, 2020-09-15]}
  ### Reset Ki to defined proporions of it's initial value  
  ### (only used if corresponding emodl is defined)    
  'socialDistanceSTOP_time':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-08-30}
  ### Gradual reopening (time-wise)
  'gradual_reopening_time1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-08-30}
  'gradual_reopening_time2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-09-03}        
  'gradual_reopening_time3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-09-08}    
  'gradual_reopening_time4':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-09-13}  
  ### 'today' parameter used to constrain after when state events can be activated
  ### should be set to after reopening time events are completed
  'today' :
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-09-14}
  ### Increased testing - increased detectioon of severe symptomatic infections
  ### (only used if corresponding emodl is defined)
  ### Use fixed dates or define detection time relative to  ki_multiplier_time_3c
  'detection_time_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-07}
  'detection_time_2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-14}
  'detection_time_3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-21} 
  'detection_time_4':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-28} 
  'detection_time_5':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-04}
  'detection_time_6':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-18}
  'detection_time_7':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-01}
  'crit_time_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-01} 
  'crit_time_2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-05-01} 
  'crit_time_3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-01}
  'd_Sym_change_time_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-15}
  'd_Sym_change_time_2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-15}
  'd_Sym_change_time_3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-05-01}
  'd_Sym_change_time_4':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-01}
  'd_Sym_change_time_5':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-01}
  ### Contact tracing - increase detectioon of asymptomatic, presymptomatic and mild infections
  ### Note detection of asymptomatic and presymptomatic assumed to be the same
  ### (only used if corresponding emodl is defined)
  'contact_tracing_start_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-08-30}
  ## stop after simulation end to simulate indefinite contact tracing
  'contact_tracing_stop1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2022-05-30}
  'change_testDelay_time1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-08-30}
    #function_kwargs: {'dates': [2020-04-15, 2020-05-15, 2020-06-15, 2020-07-15, 2020-08-15, 2020-09-15]}
  'cfr_time_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-01}   
  'cfr_time_2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-01}   
fitted_parameters:
  Kis:
    'Chicago':
      np: logspace
      function_kwargs: {'start': -1, 'stop': 0.2, 'num': 10}
