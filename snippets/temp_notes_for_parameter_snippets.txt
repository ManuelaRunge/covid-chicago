

#### Cobey model
def generateParameterSamples_cobeyModel(samples, pop, addIntervention = True, interventionStart=10, coverage=0.4):
        df =  pd.DataFrame()
        df['sample_num'] = range(samples)
        df['speciesS'] = pop
        df['initialAs'] = 10#np.random.uniform(1, 5, samples)

        df['incubation_pd'] = np.random.uniform(4.2, 6.63, samples)
        df['time_to_symptoms'] = np.random.uniform(1, 5,samples)
        df['time_to_hospitalization'] = np.random.uniform(2, 10, samples)
        df['time_to_critical'] = np.random.uniform(4, 9, samples)
        df['time_to_death'] = np.random.uniform(3, 11, samples)
        df['recovery_rate_asymp'] = np.random.uniform(6, 16, samples)
        df['recovery_rate_mild'] = np.random.uniform(6, 16, samples)
        df['recovery_rate_hosp'] = np.random.uniform(6, 16, samples)
        df['recovery_rate_crit'] = np.random.uniform(6, 16, samples)
        df['fraction_symptomatic'] = np.random.uniform(0.5, 0.8, samples)
        df['fraction_severe'] = np.random.uniform(0.2, 0.5, samples)
        df['fraction_critical'] = np.random.uniform(0.1, 0.3, samples)
        df['cfr'] = np.random.uniform(0.008, 0.04, samples)
        df['fraction_dead'] = df.apply(lambda x : x['cfr']/x['fraction_severe'], axis=1)
        df['fraction_hospitalized'] = df.apply(lambda x : 1 - x['fraction_critical'] - x['fraction_dead'], axis=1)
        df['reduced_inf_of_det_cases'] = np.random.uniform(0.5, 0.9, samples)
        df['d_Sym'] = np.random.uniform(0.2, 0.3, samples)
        df['d_Sys'] = np.random.uniform(0.7, 0.9, samples)
        df['d_As'] = np.random.uniform(0, 0, samples)
        #df['Ki'] = Ki_i

        if addIntervention == True:
            df = define_intervention_param(df, startDate=interventionStart, reduction=coverage)

        df.to_csv(os.path.join(sim_output_path, "sampled_parameters.csv"))
        return(df)
		

#### UPDATED - without intervention
def generateParameterSamples_extendedModel(samples, pop):
    df = pd.DataFrame()
    df['sample_num'] = range(samples)
    df['speciesS'] = pop
    df['initialAs'] = np.random.uniform(1, 5, samples)
    df['incubation_pd'] = np.random.uniform(4.2, 6.63, samples)
    df['time_to_infectious'] = np.random.uniform(0, df['incubation_pd'] , samples)  # placeholder and  time_to_infectious <= incubation_pd
    df['time_to_hospitalization'] = np.random.normal(5.76, 4.22, samples)  # Imperial-College-COVID19-symptom-progression-11-03-2020.pdf
    df['time_to_critical'] = np.random.uniform(4, 9, samples)  # https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(20)30183-5/fulltext
    df['time_to_death'] = np.random.uniform(3, 11, samples)
    df['recovery_rate'] = np.random.uniform(6, 16, samples)
    df['fraction_hospitalized'] = np.random.uniform(0.1, 5, samples)
    df['fraction_symptomatic'] = np.random.uniform(0.5, 0.8, samples)
    df['fraction_critical'] = np.random.uniform(0.1, 5, samples)
    df['reduced_inf_of_det_cases'] = np.random.uniform(0.2, 0.3, samples)
    df['cfr'] = np.random.uniform(0.008, 0.022, samples)  # CDC China
    df['d_Sy'] = np.random.uniform(0.2, 0.3, samples)
    df['d_H'] = np.random.uniform(1, 1, samples)
    df['d_As'] = np.random.uniform(0, 0, samples)
    # df['Ki'] = Ki_i
	
	
#### TEST PLACEHOLDER
def replaceParameters_test(inputfile , outputfile):
    speciesS = 1000 #360980
    initialAs = np.random.uniform(5, 10)
    incubation_pd = np.random.uniform(4.2, 6.63)
    time_to_infectious = np.random.uniform(0, incubation_pd)
    time_to_hospitalization = np.random.normal(5.9, 2)
    time_to_critical = np.random.normal(5.9, 2)
    time_to_death = np.random.uniform(1, 3)
    recovery_rate = np.random.uniform(6, 16)
    fraction_hospitalized = np.random.uniform(0.1, 0.5)
    fraction_symptomatic = np.random.uniform(0.5, 0.8)
    fraction_critical = np.random.uniform(0.1, 0.5)
    reduced_inf_of_det_cases = np.random.uniform(0,1)
    cfr = np.random.uniform(0.008, 0.022)
    d_Sy = np.random.uniform(0.8, 0.9)
    d_H = 1
    d_As = 0
    Ki = np.random.uniform(0.5e-2, 0.5e-6)